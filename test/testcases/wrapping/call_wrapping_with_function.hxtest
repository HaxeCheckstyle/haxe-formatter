{}

---

class Main {
	static function main() {
		callDisplay(method,
					[requestJson],
					null,
					token,
					result -> {
						var arrivalTime = Date.now().getTime();
						switch (result) {
							case DResult(data):
								var response:ResponseMessage = try {
									Json.parse(data);
								} catch (e:Any) {
									return errback(Std.string(e));
								}
								if (Reflect.hasField(response, "error"))
									errback(response.error.message);
								else
									runHaxeMethodCallback(response, beforeCallTime, arrivalTime, callback, errback, method);
							case DCancelled:
						}
					},
					error -> {
						// this should never happen (if on a Haxe version that supports JSON-RPC)
						errback(error);
					});
	}
	function handleJsonRpc(params:{fsPath:String}, token:CancellationToken, resolve:{pack:String}->Void, reject:ResponseError<NoData>->Void) {
		context.callHaxeMethod(DisplayMethods.DeterminePackage,
			{file: new FsPath(params.fsPath)},
			token,
			result -> {
				resolve({pack: result.join(".")});
				return null;
			},
			error -> reject(ResponseError.internalError(error)));
	}
	public function onGotoTypeDefinition(params:TextDocumentPositionParams, token:CancellationToken, resolve:Definition->Void,
			reject:ResponseError<NoData>->Void) {
		var doc = context.documents.get(params.textDocument.uri);
		context.callHaxeMethod(DisplayMethods.GotoTypeDefinition,
			{file: doc.fsPath, contents: doc.content, offset: doc.offsetAt(params.position)},
			token,
			locations -> {
				resolve(locations.map(location -> {
						{
							uri: location.file.toUri(),
							range: location.range
						}
					}));
				return null;
			},
			error -> reject(ResponseError.internalError(error)));
	}
	public function callHaxeMethod<P, R>(method:HaxeRequestMethod<P, Response<R>>, ?params:P, token:CancellationToken, callback:R->String,
			errback:(
			error:String) -> Void) {
		// TODO: avoid duplicating jsonrpc.Protocol logic
	}
}

---

class Main {
	static function main() {
		callDisplay(method, [requestJson], null, token, result -> {
			var arrivalTime = Date.now().getTime();
			switch (result) {
				case DResult(data):
					var response:ResponseMessage = try {
						Json.parse(data);
					} catch (e:Any) {
						return errback(Std.string(e));
					}
					if (Reflect.hasField(response, "error"))
						errback(response.error.message);
					else
						runHaxeMethodCallback(response, beforeCallTime, arrivalTime, callback, errback, method);
				case DCancelled:
			}
		}, error -> {
			// this should never happen (if on a Haxe version that supports JSON-RPC)
			errback(error);
		});
	}

	function handleJsonRpc(params:{fsPath:String}, token:CancellationToken, resolve:{pack:String}->Void, reject:ResponseError<NoData>->Void) {
		context.callHaxeMethod(DisplayMethods.DeterminePackage, {file: new FsPath(params.fsPath)}, token, result -> {
			resolve({pack: result.join(".")});
			return null;
		}, error -> reject(ResponseError.internalError(error)));
	}

	public function onGotoTypeDefinition(params:TextDocumentPositionParams, token:CancellationToken, resolve:Definition->Void,
			reject:ResponseError<NoData>->Void) {
		var doc = context.documents.get(params.textDocument.uri);
		context.callHaxeMethod(DisplayMethods.GotoTypeDefinition, {file: doc.fsPath, contents: doc.content, offset: doc.offsetAt(params.position)}, token,
			locations -> {
				resolve(locations.map(location -> {
						{
							uri: location.file.toUri(),
							range: location.range
						}
					}));
				return null;
			}, error -> reject(ResponseError.internalError(error)));
	}

	public function callHaxeMethod<P, R>(method:HaxeRequestMethod<P, Response<R>>, ?params:P, token:CancellationToken, callback:R->String,
			errback:(error:String) -> Void) {
		// TODO: avoid duplicating jsonrpc.Protocol logic
	}
}
