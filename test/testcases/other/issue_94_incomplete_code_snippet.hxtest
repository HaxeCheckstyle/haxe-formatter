{
	"wrapping": {
		"anonType": {
			"rules": []
		}
	}
}

---

class /**/ Main /**/ extends /**/ openfl.display.DisplayObject /**/ {} /**/
abstract /**/ Abstract /**/ (/**/ String /**/) /**/ from /**/ String /**/ to /**/ /**/ String /**/ {}
interface /**/ ITest /**/ extends /**/ IBase /**/ {} /**/
typedef /**/ WinHandle /**/ = /**/ hl.Abstract /**/ <@:const 5 /**/>;
enum Color /**/ </**/ T> /**/ {} /**/

public function dispatch2(/**/?/**/value1/**/:/**/T1/**/<T2>/**/ = /**/ "", /**/ @:const value2:T2 = SomeClass.Constant,
    value2:/**/{ /**/ ?foo /**/ : /**/ Dynamic /**/ <String> /**/ }):Void
{
}

---

class /**/ Main /**/ extends /**/ openfl.display.DisplayObject /**/ {} /**/
abstract /**/ Abstract /**/ (/**/ String /**/) /**/ from /**/ String /**/ to /**/ /**/ String /**/ {}
interface /**/ ITest /**/ extends /**/ IBase /**/ {} /**/
typedef /**/ WinHandle /**/ = /**/ hl.Abstract /**/<@:const 5 /**/>;
enum Color /**/</**/ T> /**/ {} /**/

public function dispatch2(/**/ ? /**/ value1 /**/: /**/ T1 /**/<T2> /**/ = /**/ "", /**/ @:const value2:T2 = SomeClass.Constant,
	value2: /**/ {/**/ ?foo /**/: /**/ Dynamic /**/<String> /**/}):Void {}
