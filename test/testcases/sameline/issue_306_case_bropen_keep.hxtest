{
	"wrapping": {
		"maxLineLength": 1600,
		"objectLiteral": {
			"defaultWrap": "keep"
		}
	},
	"sameLine": {
		"caseBody": "keep",
		"expressionCase": "keep"
	}
}

---

class Main {
	public static function main() {
		switch f
		{
			case {name: name, kind: FVar(AccCall, AccCall)}
				: macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _: continue;
		}
		switch f
		{
			case
				{name: name, kind: FVar(AccCall, AccCall)}
				: macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _: continue;
		}
		return switch f
		{
			case {name: name, kind: FVar(AccCall, AccCall)}:
				macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _:
			continue;
		}
		return switch f
		{
			case
				{name: name, kind: FVar(AccCall, AccCall)}:
				macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _:
			continue;
		}
	}
}

---

class Main {
	public static function main() {
		switch f {
			case {name: name, kind: FVar(AccCall, AccCall)}: macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _: continue;
		}
		switch f {
			case {name: name, kind: FVar(AccCall, AccCall)}: macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _: continue;
		}
		return switch f {
			case {name: name, kind: FVar(AccCall, AccCall)}:
				macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _:
				continue;
		}
		return switch f {
			case {name: name, kind: FVar(AccCall, AccCall)}:
				macro callbacks.push(model.observables.$name.bind({direct: direct}, onPropertyChange.bind($v{name})));
			case _:
				continue;
		}
	}
}
