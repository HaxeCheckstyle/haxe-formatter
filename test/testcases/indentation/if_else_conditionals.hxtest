{
	"lineEnds": {
			"leftCurly": "both",
			"rightCurly": "both"
	},
	"sameLine": {
			"ifBody": "same",
			"ifElse": "next",
			"doWhile": "next",
			"tryBody": "next",
			"tryCatch": "next"
	}
}

---

class Main {
	public function main()
	{
		if (elements != null)
		{
			this = new js.html.Int8Array(elements);
		}
		else if (array != null)
		{
			this = new js.html.Int8Array(untyped array);
			#if (openfl && commonjs)
			}
			else if (vector != null)
			{
				this = new js.html.Int8Array(untyped (vector));
			#elseif openfl
			}
			else if (vector != null)
			{
				this = new js.html.Int8Array(untyped untyped (vector).__array);
			#end
		}
		else if (view != null)
		{
			this = new js.html.Int8Array(untyped view);
		}
		else if (buffer != null)
		{
			if (len == null)
			{
				this = new js.html.Int8Array(buffer, byteoffset);
			}
			else
			{
				this = new js.html.Int8Array(buffer, byteoffset, len);
			}
		}
		else
		{
			this = null;
		}
	}
}

---

class Main
{
	public function main()
	{
		if (elements != null)
		{
			this = new js.html.Int8Array(elements);
		}
		else if (array != null)
		{
			this = new js.html.Int8Array(untyped array);
		#if (openfl && commonjs)
		}
		else if (vector != null)
		{
			this = new js.html.Int8Array(untyped (vector));
		#elseif openfl
		}
		else if (vector != null)
		{
			this = new js.html.Int8Array(untyped untyped (vector).__array);
		#end
		}
		else if (view != null)
		{
			this = new js.html.Int8Array(untyped view);
		}
		else if (buffer != null)
		{
			if (len == null)
			{
				this = new js.html.Int8Array(buffer, byteoffset);
			}
			else
			{
				this = new js.html.Int8Array(buffer, byteoffset, len);
			}
		}
		else
		{
			this = null;
		}
	}
}
