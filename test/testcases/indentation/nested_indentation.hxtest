{
}

---

#if !lime

class Main {
	private static function __init__():Void
	{
		#if no_traces
		level = NONE;
		#elseif verbose
		level = VERBOSE;
		#else
		#if sys
		var args = Sys.args();
		if (args.indexOf("-v") > -1 || args.indexOf("-verbose") > -1)
		{
			level = VERBOSE;
		}
		else
		#end
		{
			#if debug
			level = DEBUG;
			#else
			level = INFO;
			#end
		}
		#end

		#if js
		if (untyped __js__("typeof console") == "undefined")
		{
			untyped __js__("console = {}");
		}
		var _console = untyped __js__("console");
		if (_console.log == null)
		{
			_console.log = function() {};
		}
		#end
		}
	}

	@:enum abstract LogLevel(Int) from Int to Int from UInt to UInt
	{
		public var NONE = 0;
		public var ERROR = 1;
		public var WARN = 2;
		public var INFO = 3;
		public var DEBUG = 4;
		public var VERBOSE = 5;
	}
	#else
	typedef Log = lime.utils.Log;
	typedef LogLevel = lime.utils.LogLevel;
#end

---

#if !lime
class Main {
	private static function __init__():Void {
		#if no_traces
		level = NONE;
		#elseif verbose
		level = VERBOSE;
		#else
		#if sys
		var args = Sys.args();
		if (args.indexOf("-v") > -1 || args.indexOf("-verbose") > -1) {
			level = VERBOSE;
		} else
		#end
		{
			#if debug
			level = DEBUG;
			#else
			level = INFO;
			#end
		}
		#end

		#if js
		if (untyped __js__("typeof console") == "undefined") {
			untyped __js__("console = {}");
		}
		var _console = untyped __js__("console");
		if (_console.log == null) {
			_console.log = function() {};
		}
		#end
	}
}

@:enum abstract LogLevel(Int) from Int to Int from UInt to UInt {
	public var NONE = 0;
	public var ERROR = 1;
	public var WARN = 2;
	public var INFO = 3;
	public var DEBUG = 4;
	public var VERBOSE = 5;
}
#else
typedef Log = lime.utils.Log;
typedef LogLevel = lime.utils.LogLevel;
#end
