{
}

---

class Main {
	/** @Simple full screen vertex shader **/
	static inline var VERTEX_SHADER:String = "
#ifdef GL_ES
	precision mediump float;
#endif

attribute vec2 aVertex;
attribute vec2 aTexCoord;
varying vec2 vTexCoord;

void main() {
	vTexCoord = aTexCoord;
	gl_Position = vec4(aVertex, 0.0, 1.0);
}";

	static var vertices(get, never):Array<Float>;
}

/**
	`Vector4` is a vector suitable for three-dimensional
	math, containing (x, y, z, w) components
**/
#if !lime_debug
@:fileXml('tags="haxe,release"')
@:noDebug
#end
class Vector4
{
}

/**
	`ImageBuffer` is a simple object for storing image data.

	For higher-level operations, use the `Image` class.
**/
#if !lime_debug
@:fileXml('tags="haxe,release"')
@:noDebug
#end

#if hl
@:keep
#end
@:allow(lime.graphics.Image)
class ImageBuffer
{
}

---

class Main {
	/** @Simple full screen vertex shader **/
	static inline var VERTEX_SHADER:String = "
#ifdef GL_ES
	precision mediump float;
#endif

attribute vec2 aVertex;
attribute vec2 aTexCoord;
varying vec2 vTexCoord;

void main() {
	vTexCoord = aTexCoord;
	gl_Position = vec4(aVertex, 0.0, 1.0);
}";

	static var vertices(get, never):Array<Float>;
}

/**
	`Vector4` is a vector suitable for three-dimensional
	math, containing (x, y, z, w) components
**/
#if !lime_debug
@:fileXml('tags="haxe,release"')
@:noDebug
#end
class Vector4 {}

/**
	`ImageBuffer` is a simple object for storing image data.

	For higher-level operations, use the `Image` class.
**/
#if !lime_debug
@:fileXml('tags="haxe,release"')
@:noDebug
#end
#if hl
@:keep
#end
@:allow(lime.graphics.Image)
class ImageBuffer {}
