{
	"$schema": "http://json-schema.org/schema#",
	"definitions": {
		"LineEndConfig": {
			"additionalProperties": false,
			"properties": {
				"metadataVar": {
					"type": "string",
					"enum": [
						"none",
						"after",
						"afterLast",
						"forceAfterLast"
					],
					"propertyOrder": 1
				},
				"metadataFunction": {
					"type": "string",
					"enum": [
						"none",
						"after",
						"afterLast",
						"forceAfterLast"
					],
					"propertyOrder": 2
				},
				"rightCurly": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"after",
						"both"
					],
					"propertyOrder": 7
				},
				"caseColon": {
					"type": "string",
					"enum": [
						"none",
						"after"
					],
					"propertyOrder": 4
				},
				"metadataType": {
					"type": "string",
					"enum": [
						"none",
						"after",
						"afterLast",
						"forceAfterLast"
					],
					"propertyOrder": 0
				},
				"sharp": {
					"type": "string",
					"enum": [
						"none",
						"after"
					],
					"propertyOrder": 5
				},
				"emptyCurly": {
					"type": "string",
					"enum": [
						"noBreak",
						"break"
					],
					"propertyOrder": 8
				},
				"leftCurly": {
					"type": "string",
					"enum": [
						"none",
						"after",
						"before",
						"both"
					],
					"propertyOrder": 6
				},
				"metadataOther": {
					"type": "string",
					"enum": [
						"none",
						"after",
						"afterLast",
						"forceAfterLast"
					],
					"propertyOrder": 3
				}
			},
			"type": "object"
		},
		"IndentationConfig": {
			"additionalProperties": false,
			"properties": {
				"indentObjectLiteral": {
					"type": "boolean",
					"propertyOrder": 4
				},
				"character": {
					"description": "use \"tab\" or \"<amount of spaces per indent in spaces>\" to define which character to use",
					"type": "string",
					"propertyOrder": 1
				},
				"conditionalPolicy": {
					"description": "only applies to non inlined conditionals\n\t\t\"fixedZero\" = all conditional statements should start in column 1\n\t\t\"aligned\" = conditional statements share indentation of surrounding code\n\t\t\"alignedIncrease\" = same as \"aligned\" but will increase indent by +1 for enclosed code\n\t\t\"alignedDecrease\" = same as \"aligned\" but will decrease indent by -1 for enclosed code",
					"type": "string",
					"enum": [
						"fixedZero",
						"aligned",
						"alignedIncrease",
						"alignedDecrease"
					],
					"propertyOrder": 0
				},
				"tabWidth": {
					"description": "if `character` is set to \"tab\", formatter uses `tabWidth` to calculate absolute line length",
					"type": "integer",
					"propertyOrder": 2
				},
				"trailingWhitespace": {
					"description": "adds trailing whitespace to empty lines by copying indentation from preceeding line",
					"type": "boolean",
					"propertyOrder": 3
				}
			},
			"type": "object"
		},
		"WrapRules": {
			"additionalProperties": false,
			"properties": {
				"defaultWrap": {
					"description": "default wrapping type when no rule applies",
					"type": "string",
					"enum": [
						"onePerLine",
						"onePerLineAfterFirst",
						"equalNumber",
						"fillLine",
						"noWrap",
						"keep"
					],
					"propertyOrder": 1
				},
				"defaultLocation": {
					"description": "default wrapping location before / after last token",
					"type": "string",
					"enum": [
						"beforeLast",
						"afterLast"
					],
					"propertyOrder": 2
				},
				"defaultAdditionalIndent": {
					"description": "adds indentation to all wrapped lines when applying defaultWrap",
					"type": "integer",
					"propertyOrder": 3
				},
				"rules": {
					"description": "list of wrapping rules\n\t\twrapping uses only the first rule whose conditions evaluates to true",
					"items": {
						"$ref": "#/definitions/WrapRule"
					},
					"type": "array",
					"propertyOrder": 0
				}
			},
			"type": "object"
		},
		"ImportsEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"betweenImports": {
					"description": "empty lines between two consecutive import/using lines using betweenImportsLevel",
					"type": "integer",
					"propertyOrder": 0
				},
				"betweenImportsLevel": {
					"description": "restrict betweenImports setting to a specific level\n\t\t\"all\" - apply betweenImports to all imports/using entries\n\t\t\"topLevelPackage\" - group imports/using entries using toplevel package names; no empty lines for identical toplevel names\n\t\t\"packages\" - group imports/using entries using full packages; no empty lines for identical package names",
					"type": "string",
					"enum": [
						"all",
						"firstLevelPackage",
						"secondLevelPackage",
						"thirdLevelPackage",
						"fourthLevelPackage",
						"fifthLevelPackage",
						"fullPackage"
					],
					"propertyOrder": 1
				},
				"beforeUsing": {
					"description": "empty lines between import and using lines",
					"type": "integer",
					"propertyOrder": 2
				},
				"beforeType": {
					"description": "empty lines after import and using section",
					"type": "integer",
					"propertyOrder": 3
				}
			},
			"type": "object"
		},
		"OpenClosePolicy": {
			"additionalProperties": false,
			"properties": {
				"closingPolicy": {
					"description": "\")\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 1
				},
				"removeInnerWhenEmpty": {
					"description": "\"()\" or \"( )\" - if `openingPolicy` contains `After` or `closingPolicy` contains `Before`",
					"type": "boolean",
					"propertyOrder": 2
				},
				"openingPolicy": {
					"description": "\"(\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 0
				}
			},
			"type": "object"
		},
		"EnumAbstractFieldsEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"type": "integer",
					"propertyOrder": 0
				},
				"betweenVars": {
					"type": "integer",
					"propertyOrder": 2
				},
				"betweenFunctions": {
					"type": "integer",
					"propertyOrder": 4
				},
				"afterVars": {
					"type": "integer",
					"propertyOrder": 3
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"type": "integer",
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"WrapCondition": {
			"required": [
				"cond"
			],
			"additionalProperties": false,
			"properties": {
				"cond": {
					"type": "string",
					"enum": [
						"itemCount >= n",
						"itemCount <= n",
						"anyItemLength >= n",
						"anyItemLength <= n",
						"totalItemLength >= n",
						"totalItemLength <= n",
						"lineLength >= n",
						"lineLength <= n"
					],
					"propertyOrder": 0
				},
				"value": {
					"type": "integer",
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"TypedefFieldsEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"type": "integer",
					"propertyOrder": 0
				},
				"betweenFields": {
					"type": "integer",
					"propertyOrder": 2
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"type": "integer",
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"ParenWhitespaceConfig": {
			"additionalProperties": false,
			"properties": {
				"metadataParens": {
					"description": "parens used for metadata",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 0
				},
				"callParens": {
					"description": "parens used for calls",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 3
				},
				"forLoopParens": {
					"description": "parens used for for loops",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 5
				},
				"anonFuncParamParens": {
					"description": "parens used for anon function parameters",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 2
				},
				"conditionParens": {
					"description": "parens used for conditions",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 4
				},
				"expressionParens": {
					"description": "parens used for expressions",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 6
				},
				"funcParamParens": {
					"description": "parens used for function parameters",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"WrapRule": {
			"required": [
				"conditions",
				"type"
			],
			"additionalProperties": false,
			"properties": {
				"conditions": {
					"description": "list of conditions\n\t\twrapping selects a rule if all of its conditions evaluate to true",
					"items": {
						"$ref": "#/definitions/WrapCondition"
					},
					"type": "array",
					"propertyOrder": 0
				},
				"additionalIndent": {
					"description": "adds indentation to all wrapped lines",
					"type": "integer",
					"propertyOrder": 3
				},
				"location": {
					"description": "default wrapping location before / after last token",
					"type": "string",
					"enum": [
						"beforeLast",
						"afterLast"
					],
					"propertyOrder": 2
				},
				"type": {
					"description": "wrapping type",
					"type": "string",
					"enum": [
						"onePerLine",
						"onePerLineAfterFirst",
						"equalNumber",
						"fillLine",
						"noWrap",
						"keep"
					],
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"FormatterConfig": {
			"additionalProperties": false,
			"properties": {
				"disableFormatting": {
					"description": "turns off formatting for all files in current folder and subfolders\n\t\tunless subfolder contains a \"hxformat.json\"",
					"type": "boolean",
					"propertyOrder": 0
				},
				"excludes": {
					"description": "regular expressions matching files to exclude from formatting\n\t\tdefault ist to exclude any \".haxelib\" folder",
					"items": {
						"type": "string"
					},
					"type": "array",
					"propertyOrder": 7
				},
				"indentation": {
					"$ref": "#/definitions/IndentationConfig",
					"propertyOrder": 2
				},
				"emptyLines": {
					"$ref": "#/definitions/EmptyLinesConfig",
					"propertyOrder": 1
				},
				"lineEnds": {
					"$ref": "#/definitions/LineEndConfig",
					"propertyOrder": 3
				},
				"sameLine": {
					"$ref": "#/definitions/SameLineConfig",
					"propertyOrder": 4
				},
				"wrapping": {
					"$ref": "#/definitions/WrapConfig",
					"propertyOrder": 6
				},
				"whitespace": {
					"$ref": "#/definitions/WhitespaceConfig",
					"propertyOrder": 5
				}
			},
			"type": "object"
		},
		"EmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"beforeRightCurly": {
					"description": "Remove or keep empty lines above \"}\"",
					"type": "string",
					"enum": [
						"keep",
						"remove"
					],
					"propertyOrder": 7
				},
				"afterLeftCurly": {
					"description": "Remove or keep empty lines below \"{\"",
					"type": "string",
					"enum": [
						"keep",
						"remove"
					],
					"propertyOrder": 8
				},
				"afterReturn": {
					"description": "Remove or keep empty lines below \"return\"",
					"type": "string",
					"enum": [
						"keep",
						"remove"
					],
					"propertyOrder": 9
				},
				"afterPackage": {
					"description": "empty lines after package declaration",
					"type": "integer",
					"propertyOrder": 3
				},
				"betweenMultilineComments": {
					"description": "Adds empty lines between two consecutive multiline comments",
					"type": "integer",
					"propertyOrder": 22
				},
				"finalNewline": {
					"description": "adds a final newline",
					"type": "boolean",
					"propertyOrder": 0
				},
				"importAndUsing": {
					"description": "empty lines for package, import and using section",
					"$ref": "#/definitions/ImportsEmptyLinesConfig",
					"propertyOrder": 4
				},
				"beforeBlocks": {
					"type": "string",
					"enum": [
						"keep",
						"remove"
					],
					"propertyOrder": 10
				},
				"betweenSingleLineTypes": {
					"description": "empty lines between two single line types",
					"type": "integer",
					"propertyOrder": 6
				},
				"conditionalsEmptyLines": {
					"$ref": "#/definitions/ConditionalEmptyLinesConfig",
					"propertyOrder": 19
				},
				"afterBlocks": {
					"type": "string",
					"enum": [
						"keep",
						"remove"
					],
					"propertyOrder": 11
				},
				"enumEmptyLines": {
					"$ref": "#/definitions/TypedefFieldsEmptyLinesConfig",
					"propertyOrder": 17
				},
				"externClassEmptyLines": {
					"$ref": "#/definitions/InterfaceFieldsEmptyLinesConfig",
					"propertyOrder": 14
				},
				"betweenTypes": {
					"description": "empty lines between types",
					"type": "integer",
					"propertyOrder": 5
				},
				"maxAnywhereInFile": {
					"description": "maximum consecutive empty lines anywhere in file - runs last, all empty lines policies are limited to \"maxAnywhereInFile\"",
					"type": "integer",
					"propertyOrder": 1
				},
				"typedefEmptyLines": {
					"$ref": "#/definitions/TypedefFieldsEmptyLinesConfig",
					"propertyOrder": 18
				},
				"enumAbstractEmptyLines": {
					"$ref": "#/definitions/EnumAbstractFieldsEmptyLinesConfig",
					"propertyOrder": 12
				},
				"abstractEmptyLines": {
					"$ref": "#/definitions/ClassFieldsEmptyLinesConfig",
					"propertyOrder": 15
				},
				"beforePackage": {
					"description": "empty lines before package declaration",
					"type": "integer",
					"propertyOrder": 2
				},
				"classEmptyLines": {
					"$ref": "#/definitions/ClassFieldsEmptyLinesConfig",
					"propertyOrder": 13
				},
				"beforeDocCommentEmptyLines": {
					"description": "\"one\" adds one empty line above doc comments\n\t\t\"none\" removes all empty lines above doc comments\n\t\t\"ignore\" respects empty lines set via \"betweenVars\", \"betweenFunctions\", etc.",
					"type": "string",
					"enum": [
						"ignore",
						"none",
						"one"
					],
					"propertyOrder": 20
				},
				"interfaceEmptyLines": {
					"$ref": "#/definitions/InterfaceFieldsEmptyLinesConfig",
					"propertyOrder": 16
				},
				"afterFileHeaderComment": {
					"description": "Adds empty lines when file starts with a multiline comment",
					"type": "integer",
					"propertyOrder": 21
				}
			},
			"type": "object"
		},
		"ClassFieldsEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"type": "integer",
					"propertyOrder": 0
				},
				"afterStaticFunctions": {
					"type": "integer",
					"propertyOrder": 7
				},
				"betweenStaticFunctions": {
					"type": "integer",
					"propertyOrder": 8
				},
				"betweenVars": {
					"type": "integer",
					"propertyOrder": 5
				},
				"afterStaticVars": {
					"type": "integer",
					"propertyOrder": 3
				},
				"betweenFunctions": {
					"type": "integer",
					"propertyOrder": 10
				},
				"afterVars": {
					"type": "integer",
					"propertyOrder": 6
				},
				"afterPrivateFunctions": {
					"type": "integer",
					"propertyOrder": 9
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"type": "integer",
					"propertyOrder": 1
				},
				"afterPrivateVars": {
					"type": "integer",
					"propertyOrder": 4
				},
				"betweenStaticVars": {
					"type": "integer",
					"propertyOrder": 2
				}
			},
			"type": "object"
		},
		"BracesWhitespaceConfig": {
			"additionalProperties": false,
			"properties": {
				"objectLiteralBraces": {
					"description": "braces for object literals",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 3
				},
				"unknownBraces": {
					"description": "unknown braces",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 4
				},
				"blockBraces": {
					"description": "braces for blocks",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 0
				},
				"typedefBraces": {
					"description": "braces for typdefs",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 1
				},
				"anonTypeBraces": {
					"description": "braces for anon types",
					"$ref": "#/definitions/OpenClosePolicy",
					"propertyOrder": 2
				}
			},
			"type": "object"
		},
		"ConditionalEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"afterElse": {
					"type": "integer",
					"propertyOrder": 2
				},
				"afterIf": {
					"type": "integer",
					"propertyOrder": 0
				},
				"beforeElse": {
					"type": "integer",
					"propertyOrder": 1
				},
				"beforeEnd": {
					"type": "integer",
					"propertyOrder": 3
				},
				"beforeError": {
					"type": "integer",
					"propertyOrder": 4
				},
				"afterError": {
					"type": "integer",
					"propertyOrder": 5
				}
			},
			"type": "object"
		},
		"InterfaceFieldsEmptyLinesConfig": {
			"additionalProperties": false,
			"properties": {
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"type": "integer",
					"propertyOrder": 0
				},
				"betweenVars": {
					"type": "integer",
					"propertyOrder": 2
				},
				"betweenFunctions": {
					"type": "integer",
					"propertyOrder": 4
				},
				"afterVars": {
					"type": "integer",
					"propertyOrder": 3
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"type": "integer",
					"propertyOrder": 1
				}
			},
			"type": "object"
		},
		"WrapConfig": {
			"additionalProperties": false,
			"properties": {
				"opBoolChain": {
					"description": "OpBool chain wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 9
				},
				"functionSignature": {
					"description": "named function signature wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 3
				},
				"anonType": {
					"description": "anon types wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 7
				},
				"methodChain": {
					"description": "method chaining wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 8
				},
				"arrayWrap": {
					"description": "array wrapping rules\n\t\tdoes not affect array comprehension, use \"sameLine.comprehensionFor\"",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 1
				},
				"maxLineLength": {
					"description": "maximum characters per line, formatter will try to wrap code longer than `maxLineLength`",
					"type": "integer",
					"propertyOrder": 0
				},
				"callParameter": {
					"description": "call parameter wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 5
				},
				"implementsExtends": {
					"description": "implements / extends chain wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 10
				},
				"anonFunctionSignature": {
					"description": "anon function signature wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 4
				},
				"typeParameter": {
					"description": "type parameter wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 2
				},
				"objectLiteral": {
					"description": "object literal wrapping rules",
					"$ref": "#/definitions/WrapRules",
					"propertyOrder": 6
				}
			},
			"type": "object"
		},
		"WhitespaceConfig": {
			"additionalProperties": false,
			"properties": {
				"ternaryPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 14
				},
				"typeParamClosePolicy": {
					"description": "\">\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 5
				},
				"caseColonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 10
				},
				"intervalPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 24
				},
				"commaPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 7
				},
				"typeCheckColonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 13
				},
				"typeParamOpenPolicy": {
					"description": "\"<\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 4
				},
				"openingBracketPolicy": {
					"description": "\"[\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 2
				},
				"closingBracketPolicy": {
					"description": "\"]\"",
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 3
				},
				"bracesConfig": {
					"description": "\"{\" + \"}\"",
					"$ref": "#/definitions/BracesWhitespaceConfig",
					"propertyOrder": 1
				},
				"compressSuccessiveParenthesis": {
					"description": "should formatter compress spaces for successive parenthesis `( [ {` vs. `([{`",
					"type": "boolean",
					"propertyOrder": 28
				},
				"functionTypeHaxe3Policy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 26
				},
				"arrowFunctionsPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 25
				},
				"doPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 17
				},
				"semicolonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 15
				},
				"forPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 19
				},
				"parenConfig": {
					"description": "\"(\" + \")\"",
					"$ref": "#/definitions/ParenWhitespaceConfig",
					"propertyOrder": 0
				},
				"objectFieldColonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 11
				},
				"colonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 9
				},
				"dotPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 8
				},
				"switchPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 20
				},
				"formatStringInterpolation": {
					"description": "should formatter try to format string interpolation expressions (e.g. '${x+3}' -> '${x + 3}')\n\t\tonly applies spaces, no newlines or wrapping",
					"type": "boolean",
					"propertyOrder": 29
				},
				"typeExtensionPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 6
				},
				"whilePolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 18
				},
				"typeHintColonPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 12
				},
				"catchPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 22
				},
				"binopPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 23
				},
				"ifPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 16
				},
				"functionTypeHaxe4Policy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 27
				},
				"tryPolicy": {
					"type": "string",
					"enum": [
						"none",
						"before",
						"noneBefore",
						"onlyBefore",
						"after",
						"onlyAfter",
						"noneAfter",
						"around"
					],
					"propertyOrder": 21
				}
			},
			"type": "object"
		},
		"SameLineConfig": {
			"additionalProperties": false,
			"properties": {
				"tryBody": {
					"description": "same line policy for non block body of \"try\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 11
				},
				"comprehensionFor": {
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 7
				},
				"ifElse": {
					"description": "same line policy for \"else\" part of \"if…else\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 2
				},
				"expressionCase": {
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 15
				},
				"expressionTry": {
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 16
				},
				"doWhile": {
					"description": "same line policy for \"while\" part in \"do…while\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 10
				},
				"expressionIfWithBlocks": {
					"description": "will place if with one expression in a block in one line (requires \"expressionIf\" = \"same\")\n\t\tvar foo = if (bar) { \"\"; } else { \"\"; };",
					"type": "boolean",
					"propertyOrder": 5
				},
				"catchBody": {
					"description": "same line policy for non block body of \"catch\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 12
				},
				"elseIf": {
					"description": "same line policy for \"if\" part of \"else if\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 3
				},
				"functionBody": {
					"description": "same line policy for non block body of \"function\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 17
				},
				"expressionIf": {
					"description": "same line policy for non block body of \"if\" in a value place / as expression\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 4
				},
				"ifBody": {
					"description": "same line policy for non block body of \"if\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 0
				},
				"caseBody": {
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 14
				},
				"elseBody": {
					"description": "same line policy for non block body of \"else\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 1
				},
				"tryCatch": {
					"description": "same line policy for \"catch\" part of \"try…catch\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 13
				},
				"doWhileBody": {
					"description": "same line policy for non block body of \"do…while\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 9
				},
				"returnBody": {
					"description": "same line policy for return values\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 19
				},
				"anonFunctionBody": {
					"description": "same line policy for non block body of anon \"function\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 18
				},
				"forBody": {
					"description": "same line policy for non block body of \"for\"\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 6
				},
				"whileBody": {
					"description": "same line policy for non block body of \"while\" (not \"do…while\")\n\t\t* same = place function and body on same line\n\t\t* next = place body on next line\n\t\t* keep = keep same / next line from source",
					"type": "string",
					"enum": [
						"same",
						"next",
						"keep"
					],
					"propertyOrder": 8
				}
			},
			"type": "object"
		}
	},
	"$ref": "#/definitions/FormatterConfig",
	"id": "https://raw.githubusercontent.com/HaxeCheckstyle/haxe-formatter/master/resources/formatter-schema.json"
}