{
	"definitions": {
		"formatter.config.LineEndConfig": {
			"properties": {
				"leftCurly": {
					"description": "global left curly line end setting",
					"$ref": "#/definitions/formatter.config.LeftCurlyLineEndPolicy",
					"default": "after"
				},
				"caseColon": {
					"$ref": "#/definitions/formatter.config.CaseColonLineEndPolicy",
					"default": "after"
				},
				"emptyCurly": {
					"description": "global empty curlies line end setting",
					"$ref": "#/definitions/formatter.config.EmptyCurlyPolicy",
					"default": "noBreak"
				},
				"rightCurly": {
					"description": "global right curly line end setting",
					"$ref": "#/definitions/formatter.config.RightCurlyLineEndPolicy",
					"default": "both"
				},
				"metadataVar": {
					"$ref": "#/definitions/formatter.config.AtLineEndPolicy",
					"default": "none"
				},
				"objectLiteralCurly": {
					"description": "line end settings for object literal curlies",
					"$ref": "#/definitions/formatter.config.CurlyLineEndPolicy"
				},
				"typedefCurly": {
					"description": "line end settings for typedef curlies",
					"$ref": "#/definitions/formatter.config.CurlyLineEndPolicy"
				},
				"sharp": {
					"$ref": "#/definitions/formatter.config.SharpLineEndPolicy",
					"default": "after"
				},
				"metadataFunction": {
					"$ref": "#/definitions/formatter.config.AtLineEndPolicy",
					"default": "none"
				},
				"metadataOther": {
					"$ref": "#/definitions/formatter.config.AtLineEndPolicy",
					"default": "none"
				},
				"metadataType": {
					"$ref": "#/definitions/formatter.config.AtLineEndPolicy",
					"default": "none"
				},
				"blockCurly": {
					"description": "line end settings for block curlies",
					"$ref": "#/definitions/formatter.config.CurlyLineEndPolicy"
				},
				"lineEndCharacter": {
					"description": "line end character to use when outputting formatted code",
					"$ref": "#/definitions/formatter.config.LineEndCharacter",
					"default": "auto"
				},
				"anonTypeCurly": {
					"description": "line end settings for anon type curlies",
					"$ref": "#/definitions/formatter.config.CurlyLineEndPolicy"
				},
				"anonFunctionCurly": {
					"description": "line end settings for anon function body curlies",
					"$ref": "#/definitions/formatter.config.CurlyLineEndPolicy"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.InterfaceFieldsEmptyLinesConfig": {
			"properties": {
				"betweenFunctions": {
					"default": 0,
					"type": "integer"
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"default": 0,
					"type": "integer"
				},
				"afterVars": {
					"default": 0,
					"type": "integer"
				},
				"existingBetweenFields": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "keep"
				},
				"betweenVars": {
					"default": 0,
					"type": "integer"
				},
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"default": 0,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.WrapRule": {
			"properties": {
				"additionalIndent": {
					"description": "adds indentation to all wrapped lines",
					"default": 0,
					"type": "integer"
				},
				"location": {
					"description": "default wrapping location before / after last token",
					"$ref": "#/definitions/formatter.config.WrappingLocation",
					"default": "afterLast"
				},
				"conditions": {
					"description": "list of conditions wrapping selects a rule if all of its conditions evaluate to true",
					"items": {
						"$ref": "#/definitions/formatter.config.WrapCondition"
					},
					"type": "array"
				},
				"type": {
					"description": "wrapping type",
					"$ref": "#/definitions/formatter.config.WrappingType"
				}
			},
			"additionalProperties": false,
			"required": [
				"conditions",
				"type"
			],
			"type": "object"
		},
		"formatter.config.TypedefFieldsEmptyLinesConfig": {
			"properties": {
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"default": 0,
					"type": "integer"
				},
				"betweenFields": {
					"default": 0,
					"type": "integer"
				},
				"existingBetweenFields": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "keep"
				},
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"default": 0,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.LineCommentEmptyLinePolicy": {
			"anyOf": [
				{
					"const": "keep"
				},
				{
					"const": "one"
				},
				{
					"const": "none"
				}
			]
		},
		"formatter.config.KeepEmptyLinesPolicy": {
			"anyOf": [
				{
					"const": "keep"
				},
				{
					"const": "remove"
				}
			]
		},
		"formatter.config.WrappingType": {
			"anyOf": [
				{
					"description": "every item in a separate line, including first item",
					"const": "onePerLine"
				},
				{
					"description": "every item in a separate line, except first item",
					"const": "onePerLineAfterFirst"
				},
				{
					"description": "put an equal amount of items per line - not yet implemented",
					"const": "equalNumber"
				},
				{
					"description": "fill each line until maxLineLength - does not start with a newline",
					"const": "fillLine"
				},
				{
					"description": "fill each line until maxLineLength, starts with a newline before first item",
					"const": "fillLineWithLeadingBreak"
				},
				{
					"description": "do not wrap items",
					"const": "noWrap"
				},
				{
					"description": "use wrapping information from source",
					"const": "keep"
				}
			]
		},
		"formatter.config.ImportsEmptyLinesConfig": {
			"properties": {
				"betweenImports": {
					"description": "empty lines between two consecutive import/using lines using betweenImportsLevel",
					"default": 0,
					"type": "integer"
				},
				"beforeType": {
					"description": "empty lines after import and using section",
					"default": 1,
					"type": "integer"
				},
				"beforeUsing": {
					"description": "empty lines between import and using lines",
					"default": 1,
					"type": "integer"
				},
				"betweenImportsLevel": {
					"description": "restrict betweenImports setting to a specific level \"all\" - apply betweenImports to all imports/using entries \"firstLevelPackage\" - group imports/using entries using toplevel package names; no empty lines for identical toplevel names \"secondLevelPackage\" - group imports/using entries using top- and secondlevel package names; no empty lines for identical toplevel and secondlevel names \"thirdLevelPackage\" - group imports/using entries using upto thirdlevel package names \"fourthLevelPackage\" - group imports/using entries using upto foruthlevel package names \"fifthLevelPackage\" - group imports/using entries using upto fifthlevel package names \"fullPackage\" - group imports/using entries using full packages; no empty lines for identical package names",
					"$ref": "#/definitions/formatter.config.BetweenImportsEmptyLinesLevel",
					"default": "all"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.FormatterConfig": {
			"properties": {
				"emptyLines": {
					"$ref": "#/definitions/formatter.config.EmptyLinesConfig"
				},
				"indentation": {
					"$ref": "#/definitions/formatter.config.IndentationConfig"
				},
				"wrapping": {
					"$ref": "#/definitions/formatter.config.WrapConfig"
				},
				"excludes": {
					"description": "regular expressions matching files to exclude from formatting default is to exclude any `.haxelib`, `.git` and `node_modules` folder",
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"sameLine": {
					"$ref": "#/definitions/formatter.config.SameLineConfig"
				},
				"whitespace": {
					"$ref": "#/definitions/formatter.config.WhitespaceConfig"
				},
				"lineEnds": {
					"$ref": "#/definitions/formatter.config.LineEndConfig"
				},
				"disableFormatting": {
					"description": "turns off formatting for all files in current folder and subfolders unless subfolder contains a `hxformat.json`",
					"default": false,
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.EmptyCurlyPolicy": {
			"anyOf": [
				{
					"const": "noBreak"
				},
				{
					"const": "break"
				}
			]
		},
		"formatter.config.ArrayMatrixWrap": {
			"anyOf": [
				{
					"const": "noMatrixWrap"
				},
				{
					"const": "matrixWrapNoAlign"
				},
				{
					"const": "matrixWrapWithAlign"
				}
			]
		},
		"formatter.config.EmptyLinesConfig": {
			"properties": {
				"beforePackage": {
					"description": "empty lines before package declaration",
					"default": 0,
					"type": "integer"
				},
				"beforeDocCommentEmptyLines": {
					"description": "\"one\" adds one empty line above doc comments \"none\" removes all empty lines above doc comments \"ignore\" respects empty lines set via \"betweenVars\", \"betweenFunctions\", etc.",
					"$ref": "#/definitions/formatter.config.CommentEmptyLinesPolicy",
					"default": "one"
				},
				"maxAnywhereInFile": {
					"description": "maximum consecutive empty lines anywhere in file - runs last, all empty lines policies are limited to \"maxAnywhereInFile\"",
					"default": 1,
					"type": "integer"
				},
				"afterBlocks": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "remove"
				},
				"classEmptyLines": {
					"$ref": "#/definitions/formatter.config.ClassFieldsEmptyLinesConfig"
				},
				"afterPackage": {
					"description": "empty lines after package declaration",
					"default": 1,
					"type": "integer"
				},
				"conditionalsEmptyLines": {
					"$ref": "#/definitions/formatter.config.ConditionalEmptyLinesConfig"
				},
				"afterReturn": {
					"description": "Remove or keep empty lines below \"return\"",
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "remove"
				},
				"beforeRightCurly": {
					"description": "Remove or keep empty lines above \"}\"",
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "remove"
				},
				"beforeBlocks": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "remove"
				},
				"afterLeftCurly": {
					"description": "Remove or keep empty lines below \"{\"",
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "remove"
				},
				"finalNewline": {
					"description": "adds a final newline",
					"default": true,
					"type": "boolean"
				},
				"enumAbstractEmptyLines": {
					"$ref": "#/definitions/formatter.config.EnumAbstractFieldsEmptyLinesConfig"
				},
				"macroClassEmptyLines": {
					"$ref": "#/definitions/formatter.config.ClassFieldsEmptyLinesConfig"
				},
				"enumEmptyLines": {
					"$ref": "#/definitions/formatter.config.TypedefFieldsEmptyLinesConfig"
				},
				"betweenSingleLineTypes": {
					"description": "empty lines between two single line types",
					"default": 0,
					"type": "integer"
				},
				"interfaceEmptyLines": {
					"$ref": "#/definitions/formatter.config.InterfaceFieldsEmptyLinesConfig"
				},
				"afterFileHeaderComment": {
					"description": "Adds empty lines when file starts with a multiline comment",
					"default": 1,
					"type": "integer"
				},
				"externClassEmptyLines": {
					"$ref": "#/definitions/formatter.config.InterfaceFieldsEmptyLinesConfig"
				},
				"betweenTypes": {
					"description": "empty lines between types",
					"default": 1,
					"type": "integer"
				},
				"typedefEmptyLines": {
					"$ref": "#/definitions/formatter.config.TypedefFieldsEmptyLinesConfig"
				},
				"lineCommentsBetweenFunctions": {
					"description": "empty lines for line comments between functions",
					"$ref": "#/definitions/formatter.config.LineCommentEmptyLinePolicy",
					"default": "keep"
				},
				"lineCommentsBetweenTypes": {
					"description": "empty lines for line comments between types",
					"$ref": "#/definitions/formatter.config.LineCommentEmptyLinePolicy",
					"default": "keep"
				},
				"importAndUsing": {
					"description": "empty lines for package, import and using section",
					"$ref": "#/definitions/formatter.config.ImportsEmptyLinesConfig"
				},
				"betweenMultilineComments": {
					"description": "Adds empty lines between two consecutive multiline comments",
					"default": 0,
					"type": "integer"
				},
				"abstractEmptyLines": {
					"$ref": "#/definitions/formatter.config.ClassFieldsEmptyLinesConfig"
				},
				"afterFieldsWithDocComments": {
					"description": "\"one\" adds one empty line after fields with doc comments \"none\" removes all empty lines line fields with doc comments \"ignore\" respects empty lines set via \"betweenVars\", \"betweenFunctions\", etc.",
					"$ref": "#/definitions/formatter.config.CommentEmptyLinesPolicy",
					"default": "one"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.IndentationConfig": {
			"properties": {
				"tabWidth": {
					"description": "if `character` is set to \"tab\", formatter uses `tabWidth` to calculate absolute line length",
					"default": 4,
					"type": "integer"
				},
				"character": {
					"description": "use \"tab\", \" \", \"  \", \"   \", \"    \", etc. to define which character to use",
					"default": "tab",
					"type": "string"
				},
				"indentObjectLiteral": {
					"default": true,
					"type": "boolean"
				},
				"conditionalPolicy": {
					"description": "only applies to non inlined conditionals \"fixedZero\" = all conditional statements should start in column 1 \"fixedZeroIncrease\" = indentation for conditionals starts at 0 and increases for every level \"fixedZeroIncreaseBlocks\" = same as \"fixedZeroIncrease\" but increases only inside blocks, outside it's \"fixedZero\" \"aligned\" = conditional statements share indentation of surrounding code \"alignedNestedIncrease\" = conditionals align with surrounding code, but will increase indent when nested \"alignedIncrease\" = same as \"aligned\" but will increase indent by +1 for enclosed code \"alignedDecrease\" = same as \"aligned\" but will decrease indent by -1 for enclosed code",
					"$ref": "#/definitions/formatter.config.ConditionalIndentationPolicy",
					"default": "aligned"
				},
				"indentCaseLabels": {
					"description": "indent case / default labels (true) or keep them on same level as switch (false)",
					"default": true,
					"type": "boolean"
				},
				"indentComplexValueExpressions": {
					"description": "indent complex value expressions: (true)\t\t\t\t\t\t(false) var a = if (true)\t\t\tvar a = if (true) 10;\t\t\t\t\t\t10; else\t\t\t\t\telse 20;\t\t\tvs.\t\t\t20; return if (true)\t\t\treturn if (true) 10;\t\t\t\t\t\t10; else\t\t\t\t\telse 20;\t\t\t\t\t\t20;",
					"default": false,
					"type": "boolean"
				},
				"trailingWhitespace": {
					"description": "adds trailing whitespace to empty lines by copying indentation from preceeding line",
					"default": false,
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.ConditionalEmptyLinesConfig": {
			"properties": {
				"afterError": {
					"default": 0,
					"type": "integer"
				},
				"beforeEnd": {
					"default": 0,
					"type": "integer"
				},
				"beforeError": {
					"default": 0,
					"type": "integer"
				},
				"afterIf": {
					"default": 0,
					"type": "integer"
				},
				"afterElse": {
					"default": 0,
					"type": "integer"
				},
				"beforeElse": {
					"default": 0,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.LineEndCharacter": {
			"anyOf": [
				{
					"description": "detect line end character from input (repeated for each input file)",
					"const": "auto"
				},
				{
					"description": "output files with \\r line endings",
					"const": "CR"
				},
				{
					"description": "output files with \\n line endings",
					"const": "LF"
				},
				{
					"description": "output files with \\r\\n line endings",
					"const": "CRLF"
				}
			]
		},
		"formatter.config.SharpLineEndPolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "after"
				}
			]
		},
		"formatter.config.WhitespaceConfig": {
			"properties": {
				"caseColonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "onlyAfter"
				},
				"bracketConfig": {
					"description": "\"[\" + \"]\"",
					"$ref": "#/definitions/formatter.config.BracketWhitespaceConfig"
				},
				"typeCheckColonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "around"
				},
				"parenConfig": {
					"description": "\"(\" + \")\"",
					"$ref": "#/definitions/formatter.config.ParenWhitespaceConfig"
				},
				"dotPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"switchPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"commaPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "onlyAfter"
				},
				"whilePolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"formatStringInterpolation": {
					"description": "should formatter try to format string interpolation expressions (e.g. '${x+3}' -> '${x + 3}') only applies spaces, no newlines or wrapping",
					"default": true,
					"type": "boolean"
				},
				"intervalPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"binopPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "around"
				},
				"catchPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"compressSuccessiveParenthesis": {
					"description": "should formatter compress spaces for successive parenthesis `( [ {` vs. `([{`",
					"default": true,
					"type": "boolean"
				},
				"functionTypeHaxe3Policy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"functionTypeHaxe4Policy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "around"
				},
				"tryPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"objectFieldColonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"typeParamOpenPolicy": {
					"description": "\"<\"",
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"ifPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"arrowFunctionsPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "around"
				},
				"forPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"ternaryPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "around"
				},
				"colonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"bracesConfig": {
					"description": "\"{\" + \"}\"",
					"$ref": "#/definitions/formatter.config.BracesWhitespaceConfig"
				},
				"addLineCommentSpace": {
					"description": "ensure a space after '//'",
					"default": true,
					"type": "boolean"
				},
				"semicolonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "onlyAfter"
				},
				"typeExtensionPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				},
				"typeParamClosePolicy": {
					"description": "\">\"",
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"typeHintColonPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"doPolicy": {
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "after"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.ParenWhitespaceConfig": {
			"properties": {
				"whileConditionParens": {
					"description": "parens used for while conditions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"anonFuncParamParens": {
					"description": "parens used for anon function parameters",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"funcParamParens": {
					"description": "parens used for function parameters",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"ifConditionParens": {
					"description": "parens used for if conditions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"catchParens": {
					"description": "parens used for catch",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"sharpConditionParens": {
					"description": "parens used for sharp conditions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"callParens": {
					"description": "parens used for calls",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"conditionParens": {
					"description": "parens used for conditions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"expressionParens": {
					"description": "parens used for expressions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"metadataParens": {
					"description": "parens used for metadata",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"forLoopParens": {
					"description": "parens used for for loops",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"switchConditionParens": {
					"description": "parens used for switch conditions",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.ConditionalIndentationPolicy": {
			"anyOf": [
				{
					"const": "fixedZero"
				},
				{
					"const": "fixedZeroIncrease"
				},
				{
					"const": "fixedZeroIncreaseBlocks"
				},
				{
					"const": "aligned"
				},
				{
					"const": "alignedNestedIncrease"
				},
				{
					"const": "alignedIncrease"
				},
				{
					"const": "alignedDecrease"
				}
			]
		},
		"formatter.config.WhitespacePolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "before"
				},
				{
					"const": "noneBefore"
				},
				{
					"const": "onlyBefore"
				},
				{
					"const": "after"
				},
				{
					"const": "onlyAfter"
				},
				{
					"const": "noneAfter"
				},
				{
					"const": "around"
				}
			]
		},
		"formatter.config.RightCurlyLineEndPolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "before"
				},
				{
					"const": "after"
				},
				{
					"const": "both"
				}
			]
		},
		"formatter.config.WrappingLocation": {
			"anyOf": [
				{
					"const": "beforeLast"
				},
				{
					"const": "afterLast"
				}
			]
		},
		"formatter.config.CurlyLineEndPolicy": {
			"properties": {
				"leftCurly": {
					"description": "line end options for left curly",
					"$ref": "#/definitions/formatter.config.LeftCurlyLineEndPolicy",
					"default": "after"
				},
				"emptyCurly": {
					"description": "line end options for empty curlies",
					"$ref": "#/definitions/formatter.config.EmptyCurlyPolicy",
					"default": "noBreak"
				},
				"rightCurly": {
					"description": "line end options for right curly",
					"$ref": "#/definitions/formatter.config.RightCurlyLineEndPolicy",
					"default": "both"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.SameLinePolicy": {
			"anyOf": [
				{
					"const": "same"
				},
				{
					"const": "next"
				},
				{
					"const": "keep"
				}
			]
		},
		"formatter.config.BracesWhitespaceConfig": {
			"properties": {
				"anonTypeBraces": {
					"description": "braces for anon types",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"unknownBraces": {
					"description": "unknown braces",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"objectLiteralBraces": {
					"description": "braces for object literals",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"blockBraces": {
					"description": "braces for blocks",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"typedefBraces": {
					"description": "braces for typdefs",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.LeftCurlyLineEndPolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "after"
				},
				{
					"const": "before"
				},
				{
					"const": "both"
				}
			]
		},
		"formatter.config.BracketWhitespaceConfig": {
			"properties": {
				"accessBrackets": {
					"description": "brackets for array access",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"arrayLiteralBrackets": {
					"description": "brackets for array literals",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"mapLiteralBrackets": {
					"description": "brackets for map literals",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"comprehensionBrackets": {
					"description": "brackets for array and map comprehension",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				},
				"unknownBrackets": {
					"description": "unknown brackets",
					"$ref": "#/definitions/formatter.config.OpenClosePolicy"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.AtLineEndPolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "after"
				},
				{
					"const": "afterLast"
				},
				{
					"const": "forceAfterLast"
				}
			]
		},
		"formatter.config.WrapRules": {
			"properties": {
				"defaultLocation": {
					"description": "default wrapping location before / after last token",
					"$ref": "#/definitions/formatter.config.WrappingLocation",
					"default": "afterLast"
				},
				"defaultAdditionalIndent": {
					"description": "adds indentation to all wrapped lines when applying defaultWrap",
					"default": 0,
					"type": "integer"
				},
				"rules": {
					"description": "list of wrapping rules wrapping uses only the first rule whose conditions evaluates to true",
					"items": {
						"$ref": "#/definitions/formatter.config.WrapRule"
					},
					"type": "array"
				},
				"defaultWrap": {
					"description": "default wrapping type when no rule applies",
					"$ref": "#/definitions/formatter.config.WrappingType",
					"default": "noWrap"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.WrapCondition": {
			"properties": {
				"cond": {
					"$ref": "#/definitions/formatter.config.WrapConditionType"
				},
				"value": {
					"default": 1,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"required": [
				"cond"
			],
			"type": "object"
		},
		"formatter.config.WrapConditionType": {
			"anyOf": [
				{
					"description": "condition matches if item count is larger than or equal n items",
					"const": "itemCount >= n"
				},
				{
					"description": "condition matches if item count is less than or equal n items",
					"const": "itemCount <= n"
				},
				{
					"description": "condition matches if max item length is larger than or equal n characters",
					"const": "anyItemLength >= n"
				},
				{
					"description": "condition matches if max item length is less than or equal n characters",
					"const": "allItemLengths <= n"
				},
				{
					"description": "condition matches if min item length is larger than or equal n characters",
					"const": "allItemLengths >= n"
				},
				{
					"description": "condition matches if min item length is less than or equal n characters",
					"const": "anyItemLength <= n"
				},
				{
					"description": "condition matches if total length of all wrapable items is larger than or equal n characters",
					"const": "totalItemLength >= n"
				},
				{
					"description": "condition matches if total length of all wrapable items is less than or equal n characters",
					"const": "totalItemLength <= n"
				},
				{
					"description": "condition matches lines larger than or equal n characters",
					"const": "lineLength >= n"
				},
				{
					"description": "condition matches lines less than or equal n characters",
					"const": "lineLength <= n"
				},
				{
					"description": "condition value = 1 matches if line contains a multiline token (string literal, block comment) value = 0 matches if no multiline token is present",
					"const": "hasMultilineItems"
				},
				{
					"description": "condition value = 1 matches if unwrapped line exceeds maxLineLength value = 0 matches unwrapped lines not exceeding maxLineLength",
					"const": "exceedsMaxLineLength"
				},
				{
					"description": "condition value = 1 matches if all items have identical item length value = 0 matches any two items having different item lengths",
					"const": "equalItemLengths"
				}
			]
		},
		"formatter.config.CommentEmptyLinesPolicy": {
			"anyOf": [
				{
					"const": "ignore"
				},
				{
					"const": "none"
				},
				{
					"const": "one"
				}
			]
		},
		"formatter.config.EnumAbstractFieldsEmptyLinesConfig": {
			"properties": {
				"betweenFunctions": {
					"default": 1,
					"type": "integer"
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"default": 0,
					"type": "integer"
				},
				"afterVars": {
					"default": 1,
					"type": "integer"
				},
				"existingBetweenFields": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "keep"
				},
				"betweenVars": {
					"default": 0,
					"type": "integer"
				},
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"default": 0,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.SameLineConfig": {
			"properties": {
				"tryBody": {
					"description": "same line policy for non block body of \"try\" * same = place try and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"returnBodySingleLine": {
					"description": "same line policy for single line expression return values * same = place return and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"expressionCase": {
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "keep"
				},
				"elseBody": {
					"description": "same line policy for non block body of \"else\" * same = place else and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"untypedBody": {
					"description": "same line policy for untyped {…} as a body * same = place return and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"comprehensionFor": {
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"catchBody": {
					"description": "same line policy for non block body of \"catch\" * same = place catch and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"expressionIfWithBlocks": {
					"description": "will place if with one expression in a block in one line (requires \"expressionIf\" = \"same\") var foo = if (bar) { \"\"; } else { \"\"; };",
					"default": false,
					"type": "boolean"
				},
				"expressionTry": {
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"anonFunctionBody": {
					"description": "same line policy for non block body of anon \"function\" * same = place function and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"ifBody": {
					"description": "same line policy for non block body of \"if\" * same = place if and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"tryCatch": {
					"description": "same line policy for \"catch\" part of \"try…catch\" * same = place function and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"doWhile": {
					"description": "same line policy for \"while\" part in \"do…while\" * same = place while and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"expressionIf": {
					"description": "same line policy for non block body of \"if\" in a value place / as expression * same = place if and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"elseIf": {
					"description": "same line policy for \"if\" part of \"else if\" * same = place if and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"doWhileBody": {
					"description": "same line policy for non block body of \"do…while\" * same = place function and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"ifElse": {
					"description": "same line policy for \"else\" part of \"if…else\" * same = place else and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"returnBody": {
					"description": "same line policy for multiline expression return values * same = place return and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "same"
				},
				"caseBody": {
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"whileBody": {
					"description": "same line policy for non block body of \"while\" (not \"do…while\") * same = place while and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"forBody": {
					"description": "same line policy for non block body of \"for\" * same = place function and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"functionBody": {
					"description": "same line policy for non block body of \"function\" * same = place function and body on same line * next = place body on next line * keep = keep same / next line from source",
					"$ref": "#/definitions/formatter.config.SameLinePolicy",
					"default": "next"
				},
				"ifElseSemicolonNextLine": {
					"description": "Add new line after `if body` to `if (...) body; else ...` Don't touch `if (...) body else ...` or `if (...) {body} else ...`",
					"default": true,
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.OpenClosePolicy": {
			"properties": {
				"closingPolicy": {
					"description": "\")\"",
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "onlyAfter"
				},
				"openingPolicy": {
					"description": "\"(\"",
					"$ref": "#/definitions/formatter.config.WhitespacePolicy",
					"default": "none"
				},
				"removeInnerWhenEmpty": {
					"description": "\"()\" or \"( )\" - if `openingPolicy` contains `After` or `closingPolicy` contains `Before`",
					"default": true,
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.ClassFieldsEmptyLinesConfig": {
			"properties": {
				"afterPrivateFunctions": {
					"default": 1,
					"type": "integer"
				},
				"afterPrivateVars": {
					"default": 1,
					"type": "integer"
				},
				"betweenStaticFunctions": {
					"default": 1,
					"type": "integer"
				},
				"betweenFunctions": {
					"default": 1,
					"type": "integer"
				},
				"endType": {
					"description": "add empty lines before closing \"}\" of type",
					"default": 0,
					"type": "integer"
				},
				"afterStaticVars": {
					"default": 1,
					"type": "integer"
				},
				"afterVars": {
					"default": 1,
					"type": "integer"
				},
				"existingBetweenFields": {
					"$ref": "#/definitions/formatter.config.KeepEmptyLinesPolicy",
					"default": "keep"
				},
				"afterStaticFunctions": {
					"default": 1,
					"type": "integer"
				},
				"betweenVars": {
					"default": 0,
					"type": "integer"
				},
				"betweenStaticVars": {
					"default": 0,
					"type": "integer"
				},
				"beginType": {
					"description": "add empty lines after opening \"{\" of type",
					"default": 0,
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"formatter.config.BetweenImportsEmptyLinesLevel": {
			"anyOf": [
				{
					"const": "all"
				},
				{
					"const": "firstLevelPackage"
				},
				{
					"const": "secondLevelPackage"
				},
				{
					"const": "thirdLevelPackage"
				},
				{
					"const": "fourthLevelPackage"
				},
				{
					"const": "fifthLevelPackage"
				},
				{
					"const": "fullPackage"
				}
			]
		},
		"formatter.config.CaseColonLineEndPolicy": {
			"anyOf": [
				{
					"const": "none"
				},
				{
					"const": "after"
				}
			]
		},
		"formatter.config.WrapConfig": {
			"properties": {
				"anonFunctionSignature": {
					"description": "anon function signature wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"callParameter": {
					"description": "call parameter wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"arrayMatrixWrap": {
					"description": "detect arrays in matrix configuration from source noMatrixWrap = no detection matrixWrapNoAlign = detect and format as matrix without alignment matrixWrapWithAlign = detect and format as matrix and align columns",
					"$ref": "#/definitions/formatter.config.ArrayMatrixWrap",
					"default": "matrixWrapWithAlign"
				},
				"anonType": {
					"description": "anon types wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"implementsExtends": {
					"description": "implements / extends chain wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"methodChain": {
					"description": "method chaining wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"multiVar": {
					"description": "chain wrapping rules for OpAdd / OpSub",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"maxLineLength": {
					"description": "maximum characters per line, formatter will try to wrap code longer than `maxLineLength`",
					"default": 80,
					"type": "integer"
				},
				"functionSignature": {
					"description": "named function signature wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"typeParameter": {
					"description": "type parameter wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"mapWrap": {
					"description": "map literal wrapping rules does not affect map comprehension, use \"sameLine.comprehensionFor\"",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"objectLiteral": {
					"description": "object literal wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"opBoolChain": {
					"description": "OpBool chain wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"opAddSubChain": {
					"description": "chain wrapping rules for OpAdd / OpSub",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"casePattern": {
					"description": "chain wrapping rules for case patterns",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"metadataCallParameter": {
					"description": "metadata call parameter wrapping rules",
					"$ref": "#/definitions/formatter.config.WrapRules"
				},
				"arrayWrap": {
					"description": "array wrapping rules does not affect array comprehension, use \"sameLine.comprehensionFor\"",
					"$ref": "#/definitions/formatter.config.WrapRules"
				}
			},
			"additionalProperties": false,
			"type": "object"
		}
	},
	"$ref": "#/definitions/formatter.config.FormatterConfig",
	"$schema": "http://json-schema.org/draft-07/schema#"
}
